@startuml

package "exercise_refactored" {

    abstract class Door {
        - _locked: boolean
        - _opened: boolean
        + lock()
        + unlock()
        + open()
        + close()
    }

    interface ISensing {
        + proximityCallback()
    }

    interface ITimed {
        + timeOutCallback()
    }

    class SensingDoor {
        + SensingDoor(sensor: Sensor)
    }

    class TimedDoor {
        - TIME_OUT: int {static}
        + TimedDoor(timer: Timer)
    }

    class Sensor {
        + register(door: SensingDoor)
        - isPersonClose(): boolean
    }

    class Timer {
        + register(timeOut: long, door: TimedDoor)
    }

    class Main {
        + main(args: String[])
    }

    Door <|-- SensingDoor
    Door <|-- TimedDoor
    ISensing <|.. SensingDoor
    ITimed <|.. TimedDoor
    SensingDoor --> Sensor
    TimedDoor --> Timer
    Main --> SensingDoor
    Main --> TimedDoor
}

@enduml